#!/bin/bash

# Copyright 2016 Peter MÃ¶ller, Pierre Moreau
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


######################################################################################
###########################    N E T W O R K   I N F O    ############################
######################################################################################

# (Colors can be found at http://en.wikipedia.org/wiki/ANSI_escape_code, http://graphcomp.com/info/specs/ansi_col.html and other sites)
Reset="\e[0m"
ESC="\e["
RES="0"
BoldFace="1"
UnderlineFace="4"
Bold="${ESC}${BoldFace}m"


NetworkTempFile="/tmp/.${ScriptName}_Network.$$.txt"

printf "\n${ESC}${WhiteBack};${BlackFont};${BoldFace}mNetwork info:                                     ${Reset}"

#printf "Active interfaces:\n"
printf "${ESC}${UnderlineFace}m$FormatstringNetwork${Reset}\n" "Interface" "Interface Name" "IP-address" "Media Speed"

if [ -z "${OS/Linux/}" ]; then
  # This doesn't work reliable
  #EnabledInterfaces="$(ip link 2>/dev/null | egrep "state UP|state UNKNOWN" | grep -v "lo:" | cut -d: -f2 | sed -e 's/^ *//')"
  Interfaces="$(ip link 2>/dev/null | grep "^[0-9]" | grep -v "lo:" | cut -d: -f2 | sed -e 's/^ *//')"
  # Ex: Interfaces='eth0 eth1 docker0'

  FormatstringNetwork="%-10s%-20s%-20s%-6s%-12s%-15s%-6s"
  printf "$ESC${UnderlineFace}m$FormatstringNetwork$Reset\n" "Interf." "IPv4" "MAC-address" "State" "Speed" "Port" "Duplex"

  for i in $Interfaces
  do
    IPv4="$(ip address show $i | egrep -o "^\ *inet [^\ ]*\ " | awk '{print$2}')"
    # Ex: IPv4='130.235.16.180/23'
    MACaddress="$(ifconfig $i | grep HWaddr | awk '{print $NF}')"
    # Ex: MACaddress='00:1e:67:7b:2e:d0'
    State="$(ip address show $i | grep -o "state [A-Z]* " | awk '{print $2}')"
    # Ex: State='UP'
    MediaSpeed="$(ethtool $i 2>/dev/null | grep -i speed | awk '{print $2}')"
    # Ex: MediaSpeed='1000Mb/s'
    Port="$(ethtool $i 2>/dev/null | grep "Port:" | cut -d\  -f2-)"
    # EX: Port='Twisted Pair'
    Duplex="$(ethtool $i 2>/dev/null | grep "Duplex:" | cut -d\  -f2-)"
    # Ex: Duplex='Full'
    printf "$FormatstringNetwork\n" "$i" "$IPv4" "$MACaddress" "$State" "$MediaSpeed" "$Port" "$Duplex"
  done

  # Gather information about LISTEN processes:
  lsof +c 0 -i 4 -n | grep LISTEN | sort -f -k 1,1 | cut -d\( -f1 | awk '{ print "4 - "$1" "$3" "$9 }' | sed 's/:/\ /g' | sed 's/\ [[:digit:]]\{2,5\}$/\ anonymous_port/g' | uniq > /tmp/NetworkTemp
  lsof +c 0 -i 6 -n | egrep LISTEN | awk '{ print "- 6 "$1" "$3" "$9 }' | sort -f | sed 's/\ \[.*\]/\ \*/g' | sed 's/:/\ /g' | sed 's/\ [[:digit:]]\{2,5\}$/\ anonymous_port/g' | uniq >> /tmp/NetworkTemp

elif [ -z "${OS/Darwin/}" ]; then
  # FormatstringNetwork is intended for the network listing
  FormatstringNetwork="%-8s%-22s%-20s%-20s%-10s%-30s"
  printf "$ESC${UnderlineFace}m$FormatstringNetwork$Reset\n" "Interf." "Interface name" "Ipv4-addr." "MAC-address" "Status" "Media speed"
  
  # This is a very short version of the 'network_info'-script
  networksetup -listnetworkserviceorder 2>/dev/null | egrep "^\([0-9\*]*\)\ " | sed -e 's/^(//g' -e 's/) /:/' > $NetworkTempFile
  exec 4<"$NetworkTempFile"
  while IFS=: read -u 4 IFNum IFName
  do
    Interface="$(networksetup -listallhardwareports 2>/dev/null | grep -A1 "Hardware Port: $IFName" | tail -1 | awk '{print $2}' | sed -e 's/^ *//')"
    # Ex: en0
    MediaSpeed="$(networksetup -getMedia "$IFName" 2>/dev/null | grep "^Active" | cut -d: -f2- | sed -e 's/^ *//')"
    # Ex: "1000baseT" or "autoselect"
    IPaddress="$(networksetup -getinfo "$IFName" 2>/dev/null | grep "^IP address" | cut -d: -f2 | sed -e 's/^ *//')"
    # Ex: " 130.235.16.211"
    SubnetMask="$(networksetup -getinfo "$IFName" 2>/dev/null | grep "^Subnet mask" | cut -d: -f2)"
    # Ex: " 255.255.254.0"
    SubnetNr="$(echo "$SubnetMask" | awk -F . '{print "obase=2;"$1*2**(3*8)+$2*2**(2*8)+$3*2**(1*8)+$4*2**(0*8)}' | bc | grep -o 1 | wc -l | awk '{print $1}')"
    # Ex: SubnetNr='23'
    [[ -n "$IPaddress" ]] && IPv4="${IPaddress}/${SubnetNr}" || IPv4=""
    MACaddress="$(ifconfig "$Interface" 2>/dev/null | grep "ether\ " | awk '{print $2}')"
    # Ex: " 00:3e:e1:be:06:59"
    Status="$(ifconfig  "$Interface" 2>/dev/null | grep "status:\ " | awk '{print $2}')"
    # Ex: "active"
    [[ -n "$Interface" ]] && printf "$FormatstringNetwork\n" "$Interface" "$IFName" "$IPv4" "$MACaddress" "$Status" "$MediaSpeed"
  done
  [[ $Info -eq 1 ]] &&  echo "(Use \"ifconfig\" and \"networksetup\" to see network details)"

  # Gather information about LISTEN processes:
  lsof +c 0 -i 4 -n | grep LISTEN | sort -f -k 1,1 | cut -d\( -f1 | awk '{ print "4 - "$1" "$3" "$9 }' | sed 's/:/\ /g' | sed 's/\ [[:digit:]]\{2,5\}$/\ anonymous_port/g' | uniq > /tmp/NetworkTemp
  lsof +c 0 -i 6 -n | egrep LISTEN | awk '{ print "- 6 "$1" "$3" "$9 }' | sort -f | sed 's/\ \[.*\]/\ \*/g' | sed 's/:/\ /g' | sed 's/\ [[:digit:]]\{2,5\}$/\ anonymous_port/g' | uniq >> /tmp/NetworkTemp
fi

# Print LISTEN information
FormatstringListen="%-6s%-6s%-18s%-15s%6s%2s%-17s%-15s"
# First, sort by application:
less /tmp/NetworkTemp | sort -f -k 3 > "$NetworkTempFile"
rm /tmp/NetworkTemp
# Add a line at the end so that we do not forget the last line during printout
echo "" >> "$NetworkTempFile"
echo ""
if [ -n "${USER/root/}" -a -n "${UID/0/}" ]; then
  print_warning "You are not running as \"root\": you will only be able to see ports belongning to program *you* run!"
fi
LastIPv4=""
LastIPv6=""
LastProgram=""
LastUser=""
LastRange=""
LastPort=""
exec 5<"$NetworkTempFile"
if [ -s "$NetworkTempFile" ]; then
  printf "Listening ports:\n"
  printf "${ESC}${UnderlineFace}m$FormatstringListen$Reset\n" "IPv4" "IPv6" "Program" "User" "Port#" " " "PortName" "Servicerange"
  while read -u 5 IPv4 IPv6 PROGRAM USERR RANGE PORT
  do
    # Reset the colors:
    PROGR="$(echo $PROGRAM | sed 's/x20/\ /g')"
    [[ -n "$(echo $PROGR | grep -o "com.agilebits.onepas")" ]] && PROGR="1Password"
    # If the lines are the same: do nothing more than to set both 4 and 6 when it is to be printed the next turn around
    if [[ "$LastProgram" = "$PROGR" && "$LastUser" = "$USERR" && "$LastPort" = "$PORT" && "$LastRange" = "$RANGE" ]]; then
      export LastIPv4="4"
      export LastIPv6="6"
    else
      # This turn is will be printed
      # If LastProgram is NOT empty (then assume the other are as well; first turn around - do not print!)
      # the choose colors
      if [ ! -z "$LastProgram" ]; then
        # Print!!
        #printf "${ESC}${BGColor};${FontColor}m$FormatstringListen$Reset\n" "$LastIPv4" "$LastIPv6" "$LastProgram" "$LastUser" "`grep "^$LastPort\b" /etc/services | head -1 | awk '{ print $2 }' | cut -d/ -f1`" " " "`echo $LastPort | sed 's/_/\ /g'`" "$LastRange"
        printf "$FormatstringListen\n" "$LastIPv4" "$LastIPv6" "$LastProgram" "$LastUser" "`grep "^$LastPort\b" /etc/services | head -1 | awk '{ print $2 }' | cut -d/ -f1`" " " "`echo $LastPort | sed 's/_/\ /g'`" "$LastRange"
      fi
      LastIPv4="$IPv4"
      LastIPv6="$IPv6"
    fi
    LastProgram="$PROGR"
    LastUser="$USERR"
    LastPort="$PORT"
    LastRange="$RANGE"
  done
else
  echo "No ports open for listening"
fi

rm $NetworkTempFile 2>/dev/null
